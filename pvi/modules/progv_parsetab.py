
# progv_parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '7ED987C113C0EFB418CBEBABE96F1A89'
    
_lr_action_items = {'DO':([0,4,5,6,8,11,16,17,18,19,20,21,23,25,26,34,35,41,51,54,56,57,58,59,60,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,102,103,104,105,108,113,114,115,118,121,123,125,],[1,-35,-4,-32,-34,-33,-36,1,-16,-17,-13,1,-32,-13,1,-37,1,-25,-14,1,-23,-11,-13,-12,-13,-38,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,-13,-18,1,-20,-39,-24,-13,-3,-21,1,-13,-31,]),'RETURN':([0,4,5,6,8,11,16,17,18,19,20,21,23,25,26,34,35,41,51,54,56,57,58,59,60,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,102,103,104,105,108,113,114,115,118,121,123,125,],[2,-35,-4,-32,-34,-33,-36,2,-16,-17,-13,2,-32,-13,2,-37,2,-25,-14,2,-23,-11,-13,-12,-13,-38,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,-13,-18,2,-20,-39,-24,-13,-3,-21,2,-13,-31,]),'LOGICAL_EQUAL':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,37,-32,37,37,37,-37,37,37,37,-38,-42,-45,-51,-52,-47,-50,37,-44,-46,37,-43,-48,-49,-53,-9,37,-54,37,-39,37,37,37,37,]),'NUMBER':([0,2,3,4,5,6,8,11,12,14,15,16,17,18,19,20,21,23,25,26,27,28,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,100,101,102,103,104,105,108,110,113,114,115,118,121,122,123,125,],[11,11,11,-35,-4,-32,-34,-33,11,11,11,-36,11,-16,-17,-13,11,-32,-13,11,11,11,-37,11,11,11,11,11,-25,11,11,11,11,11,11,11,11,11,-14,11,11,11,-23,-11,-13,-12,-13,-38,11,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,11,11,11,-13,-18,11,-20,-39,11,-24,-13,-3,-21,11,11,-13,-31,]),'WHILE':([0,4,5,6,8,11,16,17,18,19,20,21,22,23,25,26,34,35,41,51,54,56,57,58,59,60,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,102,103,104,105,108,113,114,115,118,121,123,125,],[3,-35,-4,-32,-34,-33,-36,3,-16,-17,-13,3,55,-32,-13,3,-37,3,-25,-14,3,-23,-11,-13,-12,-13,-38,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,-13,-18,3,-20,-39,-24,-13,-3,-21,3,-13,-31,]),'LOGICAL_AND':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,47,-32,47,47,47,-37,47,47,47,-38,-42,-45,-51,-52,-47,-50,47,-44,-46,-41,-43,-48,-49,-53,-9,47,-54,47,-39,47,47,47,47,]),'TRUE':([0,2,3,4,5,6,8,11,12,14,15,16,17,18,19,20,21,23,25,26,27,28,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,100,101,102,103,104,105,108,110,113,114,115,118,121,122,123,125,],[4,4,4,-35,-4,-32,-34,-33,4,4,4,-36,4,-16,-17,-13,4,-32,-13,4,4,4,-37,4,4,4,4,4,-25,4,4,4,4,4,4,4,4,4,-14,4,4,4,-23,-11,-13,-12,-13,-38,4,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,4,4,4,-13,-18,4,-20,-39,4,-24,-13,-3,-21,4,4,-13,-31,]),'MINUS':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,50,-32,50,50,50,-37,50,50,50,-38,50,50,-51,-52,50,-50,50,50,50,50,50,-48,-49,-53,-9,50,-54,50,-39,50,50,50,50,]),'DIVIDE':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,39,-32,39,39,39,-37,39,39,39,-38,39,39,-51,-52,39,-50,39,39,39,39,39,39,39,-53,-9,39,-54,39,-39,39,39,39,39,]),'LE':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,46,-32,46,46,46,-37,46,46,46,-38,46,-45,-51,-52,-47,-50,46,-44,-46,46,46,-48,-49,-53,-9,46,-54,46,-39,46,46,46,46,]),'RPAREN':([4,8,11,16,23,28,29,32,34,61,62,63,64,65,66,67,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,94,98,106,107,108,119,124,],[-35,-34,-33,-36,-32,-56,-6,71,-37,94,-55,-58,-5,-8,97,-6,-38,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-54,109,-57,-7,-39,121,-29,]),'POWER':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,40,-32,40,40,40,-37,40,40,40,-38,40,40,40,-52,40,40,40,40,40,40,40,40,40,40,-9,40,-54,40,-39,40,40,40,40,]),'LT':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,45,-32,45,45,45,-37,45,45,45,-38,45,-45,-51,-52,-47,-50,45,-44,-46,45,45,-48,-49,-53,-9,45,-54,45,-39,45,45,45,45,]),'PLUS':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,49,-32,49,49,49,-37,49,49,49,-38,49,49,-51,-52,49,-50,49,49,49,49,49,-48,-49,-53,-9,49,-54,49,-39,49,49,49,49,]),'LOGICAL_DIFF':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,48,-32,48,48,48,-37,48,48,48,-38,-42,-45,-51,-52,-47,-50,48,-44,-46,48,-43,-48,-49,-53,-9,48,-54,48,-39,48,48,48,48,]),'COMMA':([4,8,11,16,23,34,63,65,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,94,108,],[-35,-34,-33,-36,-32,-37,95,96,-38,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-54,-39,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,23,25,26,27,28,29,31,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,67,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,100,101,102,103,104,105,108,110,113,114,115,117,118,121,122,123,125,],[6,23,23,-35,-4,-32,30,-34,-33,23,33,23,23,-36,6,-16,-17,-13,6,-32,-13,6,23,23,65,69,-37,6,23,23,23,23,-25,23,23,23,23,23,23,23,23,23,-14,23,6,23,-23,-11,-13,-12,-13,65,99,-38,23,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,23,65,23,23,-13,-18,6,-20,-39,23,-24,-13,-3,120,-21,6,23,-13,-31,]),'$end':([0,4,5,6,8,10,11,16,17,18,19,20,23,25,34,36,41,51,56,57,58,59,60,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,102,103,105,108,113,114,115,118,123,125,],[-2,-35,-4,-32,-34,0,-33,-36,-2,-16,-17,-13,-32,-13,-37,-1,-25,-14,-23,-11,-13,-12,-13,-38,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,-13,-18,-20,-39,-24,-13,-3,-21,-13,-31,]),'FUNCTION':([0,2,3,4,5,6,8,11,12,14,15,16,17,18,19,20,21,23,25,26,27,28,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,100,101,102,103,104,105,108,110,113,114,115,118,121,122,123,125,],[7,24,24,-35,-4,-32,-34,-33,24,24,24,-36,7,-16,-17,-13,24,-32,-13,24,24,24,-37,24,24,24,24,24,-25,24,24,24,24,24,24,24,24,24,-14,24,24,24,-23,-11,-13,-12,-13,-38,24,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,24,24,24,-13,-18,24,-20,-39,24,-24,-13,-3,-21,24,24,-13,-31,]),'GT':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,38,-32,38,38,38,-37,38,38,38,-38,38,-45,-51,-52,-47,-50,38,-44,-46,38,38,-48,-49,-53,-9,38,-54,38,-39,38,38,38,38,]),'STRING':([0,2,3,4,5,6,8,11,12,14,15,16,17,18,19,20,21,23,25,26,27,28,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,100,101,102,103,104,105,108,110,113,114,115,118,121,122,123,125,],[8,8,8,-35,-4,-32,-34,-33,8,8,8,-36,8,-16,-17,-13,8,-32,-13,8,8,8,-37,8,8,8,8,8,-25,8,8,8,8,8,8,8,8,8,-14,8,8,8,-23,-11,-13,-12,-13,-38,8,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,8,8,8,-13,-18,8,-20,-39,8,-24,-13,-3,-21,8,8,-13,-31,]),'FOR':([0,4,5,6,8,11,16,17,18,19,20,21,23,25,26,34,35,41,51,54,56,57,58,59,60,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,102,103,104,105,108,113,114,115,118,121,123,125,],[9,-35,-4,-32,-34,-33,-36,9,-16,-17,-13,9,-32,-13,9,-37,9,-25,-14,9,-23,-11,-13,-12,-13,-38,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,-13,-18,9,-20,-39,-24,-13,-3,-21,9,-13,-31,]),'EQUAL':([6,33,69,99,120,],[27,72,100,110,122,]),'RBRACE':([4,6,8,11,16,18,19,20,21,23,25,34,41,51,53,54,56,57,58,59,60,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,102,103,105,108,113,114,118,123,125,],[-35,-32,-34,-33,-36,-16,-17,-13,-15,-32,-13,-37,-25,-14,89,-15,-23,-11,-13,-12,-13,-38,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-10,-13,-19,-22,-54,-13,-18,-20,-39,-24,-13,-21,-13,-31,]),'TIMES':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,43,-32,43,43,43,-37,43,43,43,-38,43,43,-51,-52,43,-50,43,43,43,43,43,43,43,-53,-9,43,-54,43,-39,43,43,43,43,]),'GE':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,42,-32,42,42,42,-37,42,42,42,-38,42,-45,-51,-52,-47,-50,42,-44,-46,42,42,-48,-49,-53,-9,42,-54,42,-39,42,42,42,42,]),'LPAREN':([0,2,3,4,5,6,7,8,9,11,12,14,15,16,17,18,19,20,21,23,24,25,26,27,28,30,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,100,101,102,103,104,105,108,110,113,114,115,118,121,122,123,125,],[12,12,12,-35,-4,28,29,-34,31,-33,12,12,12,-36,12,-16,-17,-13,12,28,29,-13,12,12,12,67,-37,12,12,12,12,12,-25,12,12,12,12,12,12,12,12,12,-14,12,12,12,-23,-11,-13,-12,-13,-38,12,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,12,12,12,-13,-18,12,-20,-39,12,-24,-13,-3,-21,12,12,-13,-31,]),'VAR':([0,4,5,6,8,11,16,17,18,19,20,21,23,25,26,31,34,35,41,51,54,56,57,58,59,60,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,102,103,104,105,108,113,114,115,118,121,123,125,],[13,-35,-4,-32,-34,-33,-36,13,-16,-17,-13,13,-32,-13,13,68,-37,13,-25,-14,13,-23,-11,-13,-12,-13,-38,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,-13,-18,13,-20,-39,-24,-13,-3,-21,13,-13,-31,]),'LOGICAL_NOT':([0,2,3,4,5,6,8,11,12,14,15,16,17,18,19,20,21,23,25,26,27,28,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,100,101,102,103,104,105,108,110,113,114,115,118,121,122,123,125,],[14,14,14,-35,-4,-32,-34,-33,14,14,14,-36,14,-16,-17,-13,14,-32,-13,14,14,14,-37,14,14,14,14,14,-25,14,14,14,14,14,14,14,14,14,-14,14,14,14,-23,-11,-13,-12,-13,-38,14,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,14,14,14,-13,-18,14,-20,-39,14,-24,-13,-3,-21,14,14,-13,-31,]),'ELSE':([74,89,],[104,-9,]),'IF':([0,4,5,6,8,11,16,17,18,19,20,21,23,25,26,34,35,41,51,54,56,57,58,59,60,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,102,103,104,105,108,113,114,115,118,121,123,125,],[15,-35,-4,-32,-34,-33,-36,15,-16,-17,-13,15,-32,-13,15,-37,15,-25,-14,15,-23,-11,-13,-12,-13,-38,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,-13,-18,15,-20,-39,-24,-13,-3,-21,15,-13,-31,]),'LBRACE':([1,4,8,11,16,23,26,34,35,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,94,97,104,108,109,121,],[21,-35,-34,-33,-36,-32,21,-37,21,-38,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-54,21,21,-39,21,21,]),'FALSE':([0,2,3,4,5,6,8,11,12,14,15,16,17,18,19,20,21,23,25,26,27,28,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,100,101,102,103,104,105,108,110,113,114,115,118,121,122,123,125,],[16,16,16,-35,-4,-32,-34,-33,16,16,16,-36,16,-16,-17,-13,16,-32,-13,16,16,16,-37,16,16,16,16,16,-25,16,16,16,16,16,16,16,16,16,-14,16,16,16,-23,-11,-13,-12,-13,-38,16,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,16,16,16,-13,-18,16,-20,-39,16,-24,-13,-3,-21,16,16,-13,-31,]),'SEMICOLON':([4,6,8,11,16,18,19,20,23,25,31,34,41,51,56,57,58,59,60,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,102,103,105,108,111,112,113,114,116,118,123,125,],[-35,-32,-34,-33,-36,-16,-17,51,-32,51,-30,-37,-25,-14,-23,-11,51,-12,51,101,-38,51,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,51,-19,-22,-54,51,-18,-20,-39,-26,117,-24,51,-27,-21,51,-31,]),'BREAK':([0,4,5,6,8,11,16,17,18,19,20,21,23,25,26,34,35,41,51,54,56,57,58,59,60,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,102,103,104,105,108,113,114,115,118,121,123,125,],[18,-35,-4,-32,-34,-33,-36,18,-16,-17,-13,18,-32,-13,18,-37,18,-25,-14,18,-23,-11,-13,-12,-13,-38,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,-13,-18,18,-20,-39,-24,-13,-3,-21,18,-13,-31,]),'LOGICAL_OR':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,44,-32,44,44,44,-37,44,44,44,-38,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,44,-54,44,-39,44,44,44,44,]),'CONTINUE':([0,4,5,6,8,11,16,17,18,19,20,21,23,25,26,34,35,41,51,54,56,57,58,59,60,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,102,103,104,105,108,113,114,115,118,121,123,125,],[19,-35,-4,-32,-34,-33,-36,19,-16,-17,-13,19,-32,-13,19,-37,19,-25,-14,19,-23,-11,-13,-12,-13,-38,-13,-12,-42,-45,-51,-52,-47,-50,-40,-44,-46,-41,-43,-48,-49,-53,-9,-13,-19,-22,-54,-13,-18,19,-20,-39,-24,-13,-3,-21,19,-13,-31,]),'MOD':([4,6,8,11,16,20,23,25,26,32,34,35,60,63,71,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,102,108,111,112,116,124,],[-35,-32,-34,-33,-36,52,-32,52,52,52,-37,52,52,52,-38,52,52,-51,-52,52,-50,52,52,52,52,52,52,52,-53,-9,52,-54,52,-39,52,52,52,52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stmt_or_compound':([26,35,104,121,],[58,73,114,123,]),'progv':([0,17,],[10,36,]),'sstmt':([0,17,21,26,35,54,104,121,],[5,5,54,57,57,54,57,57,]),'optsemi':([20,25,58,60,73,91,102,114,123,],[41,56,92,93,103,105,113,118,125,]),'args':([28,95,],[62,106,]),'assign_or_stmt':([117,],[119,]),'element':([0,17,],[17,17,]),'stmts':([21,54,],[53,90,]),'params':([29,67,96,],[64,64,107,]),'exp':([0,2,3,12,14,15,17,21,26,27,28,35,37,38,39,40,42,43,44,45,46,47,48,49,50,52,54,55,72,95,100,101,104,110,121,122,],[20,25,26,32,34,35,20,20,20,60,63,20,75,76,77,78,79,80,81,82,83,84,85,86,87,88,20,91,102,63,111,112,20,116,20,124,]),'optparams':([29,67,],[66,98,]),'compoundstmt':([1,26,35,97,104,109,121,],[22,59,74,108,59,115,59,]),'assign_or_var':([31,],[70,]),'optargs':([28,],[61,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> progv","S'",1,None,None,None),
  ('progv -> element progv','progv',2,'p_progv','grammar.py',9),
  ('progv -> <empty>','progv',0,'p_progv_empty','grammar.py',13),
  ('element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt','element',6,'p_element_function','grammar.py',17),
  ('element -> sstmt','element',1,'p_element_stmt','grammar.py',21),
  ('optparams -> params','optparams',1,'p_optparams','grammar.py',25),
  ('optparams -> <empty>','optparams',0,'p_optparams_empty','grammar.py',29),
  ('params -> IDENTIFIER COMMA params','params',3,'p_params','grammar.py',33),
  ('params -> IDENTIFIER','params',1,'p_params_one','grammar.py',37),
  ('compoundstmt -> LBRACE stmts RBRACE','compoundstmt',3,'p_compoundstmt','grammar.py',41),
  ('stmts -> sstmt stmts','stmts',2,'p_stmts','grammar.py',45),
  ('stmt_or_compound -> sstmt','stmt_or_compound',1,'p_stmt_or_compound','grammar.py',49),
  ('stmt_or_compound -> compoundstmt','stmt_or_compound',1,'p_stmt_or_compound_c','grammar.py',53),
  ('optsemi -> <empty>','optsemi',0,'p_optsemi_none','grammar.py',58),
  ('optsemi -> SEMICOLON','optsemi',1,'p_optsemi_some','grammar.py',62),
  ('stmts -> <empty>','stmts',0,'p_stmts_empty','grammar.py',66),
  ('sstmt -> BREAK','sstmt',1,'p_sstmt_break','grammar.py',71),
  ('sstmt -> CONTINUE','sstmt',1,'p_sstmt_continue','grammar.py',75),
  ('sstmt -> IF exp stmt_or_compound optsemi','sstmt',4,'p_sstmt_if','grammar.py',79),
  ('sstmt -> WHILE exp stmt_or_compound optsemi','sstmt',4,'p_sstmt_while','grammar.py',83),
  ('sstmt -> DO compoundstmt WHILE exp optsemi','sstmt',5,'p_sstmt_do_while','grammar.py',87),
  ('sstmt -> IF exp compoundstmt ELSE stmt_or_compound optsemi','sstmt',6,'p_sstmt_if_else','grammar.py',91),
  ('sstmt -> IDENTIFIER EQUAL exp optsemi','sstmt',4,'p_sstmt_assignment','grammar.py',95),
  ('sstmt -> RETURN exp optsemi','sstmt',3,'p_sstmt_return','grammar.py',99),
  ('sstmt -> VAR IDENTIFIER EQUAL exp optsemi','sstmt',5,'p_sstmt_var','grammar.py',103),
  ('sstmt -> exp optsemi','sstmt',2,'p_sstmt_exp','grammar.py',107),
  ('assign_or_var -> IDENTIFIER EQUAL exp','assign_or_var',3,'p_assign_or_var','grammar.py',111),
  ('assign_or_var -> VAR IDENTIFIER EQUAL exp','assign_or_var',4,'p_assign_or_var_v','grammar.py',115),
  ('assign_or_var_stmt -> sstmt','assign_or_var_stmt',1,'p_assign_or_stmt','grammar.py',119),
  ('assign_or_stmt -> IDENTIFIER EQUAL exp','assign_or_stmt',3,'p_assign_or_stmt_a','grammar.py',123),
  ('assign_or_var -> <empty>','assign_or_var',0,'p_assign_or_var_empty','grammar.py',127),
  ('sstmt -> FOR LPAREN assign_or_var SEMICOLON exp SEMICOLON assign_or_stmt RPAREN stmt_or_compound optsemi','sstmt',10,'p_sstmt_for','grammar.py',131),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','grammar.py',151),
  ('exp -> NUMBER','exp',1,'p_exp_number','grammar.py',155),
  ('exp -> STRING','exp',1,'p_exp_string','grammar.py',159),
  ('exp -> TRUE','exp',1,'p_exp_true','grammar.py',163),
  ('exp -> FALSE','exp',1,'p_exp_false','grammar.py',167),
  ('exp -> LOGICAL_NOT exp','exp',2,'p_exp_logical_not','grammar.py',171),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp_parens','grammar.py',175),
  ('exp -> FUNCTION LPAREN optparams RPAREN compoundstmt','exp',5,'p_exp_lambda','grammar.py',179),
  ('exp -> exp LOGICAL_OR exp','exp',3,'p_exp_binop','grammar.py',183),
  ('exp -> exp LOGICAL_AND exp','exp',3,'p_exp_binop','grammar.py',184),
  ('exp -> exp LOGICAL_EQUAL exp','exp',3,'p_exp_binop','grammar.py',185),
  ('exp -> exp LOGICAL_DIFF exp','exp',3,'p_exp_binop','grammar.py',186),
  ('exp -> exp LT exp','exp',3,'p_exp_binop','grammar.py',187),
  ('exp -> exp GT exp','exp',3,'p_exp_binop','grammar.py',188),
  ('exp -> exp LE exp','exp',3,'p_exp_binop','grammar.py',189),
  ('exp -> exp GE exp','exp',3,'p_exp_binop','grammar.py',190),
  ('exp -> exp PLUS exp','exp',3,'p_exp_binop','grammar.py',191),
  ('exp -> exp MINUS exp','exp',3,'p_exp_binop','grammar.py',192),
  ('exp -> exp TIMES exp','exp',3,'p_exp_binop','grammar.py',193),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp_binop','grammar.py',194),
  ('exp -> exp POWER exp','exp',3,'p_exp_binop','grammar.py',195),
  ('exp -> exp MOD exp','exp',3,'p_exp_binop','grammar.py',196),
  ('exp -> IDENTIFIER LPAREN optargs RPAREN','exp',4,'p_exp_call','grammar.py',201),
  ('optargs -> args','optargs',1,'p_optargs','grammar.py',205),
  ('optargs -> <empty>','optargs',0,'p_optargs_empty','grammar.py',209),
  ('args -> exp COMMA args','args',3,'p_args','grammar.py',213),
  ('args -> exp','args',1,'p_args_one','grammar.py',217),
]
