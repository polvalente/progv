
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '0153DF85FE81ADE3311FCD57FA5182BE'
    
_lr_action_items = {'FUNCTION':([0,5,11,32,36,],[1,1,-4,-9,-3,]),'LBRACE':([14,17,29,31,],[-18,21,21,21,]),'RETURN':([0,5,11,21,32,33,36,],[7,7,-4,7,-9,7,-3,]),'RBRACE':([21,27,33,37,],[-10,32,-10,-11,]),'SEMICOLON':([2,4,8,14,15,20,22,26,28,32,34,],[-17,11,-18,-18,-15,-14,-12,-16,33,-9,-13,]),'EQUAL':([8,13,],[16,19,]),'ELSE':([22,32,],[29,-9,]),'COMMA':([24,],[30,]),'LPAREN':([10,],[18,]),'VAR':([0,5,11,21,32,33,36,],[6,6,-4,6,-9,6,-3,]),'RPAREN':([18,23,24,25,35,],[-6,-5,-8,31,-7,]),'IDENTIFIER':([0,1,5,6,7,9,11,16,18,19,21,30,32,33,36,],[8,10,8,13,14,14,-4,14,24,14,8,24,-9,8,-3,]),'$end':([0,3,5,11,12,32,36,],[-2,0,-2,-4,-1,-9,-3,]),'IF':([0,5,11,21,32,33,36,],[9,9,-4,9,-9,9,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'progv':([0,5,],[3,12,]),'stmts':([21,33,],[27,37,]),'stmt':([0,5,21,33,],[4,4,28,28,]),'element':([0,5,],[5,5,]),'params':([18,30,],[23,35,]),'exp':([0,5,7,9,16,19,21,33,],[2,2,15,17,20,26,2,2,]),'optparams':([18,],[25,]),'compoundstmt':([17,29,31,],[22,34,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> progv","S'",1,None,None,None),
  ('progv -> element progv','progv',2,'p_progv','parser.py',9),
  ('progv -> <empty>','progv',0,'p_progv_empty','parser.py',13),
  ('element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt','element',6,'p_element_function','parser.py',17),
  ('element -> stmt SEMICOLON','element',2,'p_element_stmt','parser.py',21),
  ('optparams -> params','optparams',1,'p_optparams','parser.py',25),
  ('optparams -> <empty>','optparams',0,'p_optparams_empty','parser.py',29),
  ('params -> IDENTIFIER COMMA params','params',3,'p_params','parser.py',33),
  ('params -> IDENTIFIER','params',1,'p_params_one','parser.py',37),
  ('compoundstmt -> LBRACE stmts RBRACE','compoundstmt',3,'p_compound_stmt','parser.py',41),
  ('stmts -> <empty>','stmts',0,'p_stmts_empty','parser.py',45),
  ('stmts -> stmt SEMICOLON stmts','stmts',3,'p_stmts','parser.py',49),
  ('stmt -> IF exp compoundstmt','stmt',3,'p_stmt_if','parser.py',53),
  ('stmt -> IF exp compoundstmt ELSE compoundstmt','stmt',5,'p_stmt_if_else','parser.py',57),
  ('stmt -> IDENTIFIER EQUAL exp','stmt',3,'p_stmt_assignment','parser.py',61),
  ('stmt -> RETURN exp','stmt',2,'p_stmt_return','parser.py',65),
  ('stmt -> VAR IDENTIFIER EQUAL exp','stmt',4,'p_stmt_var','parser.py',69),
  ('stmt -> exp','stmt',1,'p_stmt_exp','parser.py',73),
  ('exp -> IDENTIFIER','exp',1,'p_exp_identifier','parser.py',81),
]
